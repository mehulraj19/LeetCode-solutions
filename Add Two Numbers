/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* insertNode(ListNode* k, int val) {
        ListNode* n = new ListNode(val);
        if(k == NULL) {
            k = n;
        }else{
            n->next = k;
            k = n;
        }
        return k;
    }
    ListNode* reverseList(ListNode* k) {
        ListNode* current = k;
        ListNode* n = NULL;
        ListNode* prev = NULL;
        while(current != NULL) {
            n = current->next;
            current->next = prev;
            prev = current;
            current = n;
        }
        return prev;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* l3 = NULL;
        int carry = 0;
        while(l1!= NULL && l2!= NULL) {
            int c = l1->val + l2->val+carry;
            carry = 0;
            l1 = l1->next;
            l2 = l2->next;
            if(c>9) {
                l3 = insertNode(l3, c-10);
                carry=1;
            }else{
                l3 = insertNode(l3, c);
            }
        }
        while(l1!= NULL) {
            int c = l1->val + carry;
            carry = 0;
            l1 = l1->next;
            if(c>9){
                l3 = insertNode(l3, c-10);
                carry = 1;
            }else{
                l3 = insertNode(l3, c);
            }
        }
        while(l2!= NULL) {
            int c = l2->val + carry;
            carry = 0;
            l2 = l2->next;
            if(c>9){
                l3 = insertNode(l3, c-10);
                carry = 1;
            }else{
                l3 = insertNode(l3, c);
            }
        }
        if(carry == 1){
            l3 = insertNode(l3, 1);
            carry = 0;
        }
        return reverseList(l3);
    }
};
