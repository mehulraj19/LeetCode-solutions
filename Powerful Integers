class Solution {
public:
    vector<int> powerfulIntegers(int x, int y, int bound) {
        int max_i=0, max_j = 0;
        vector<int> out;
        if(bound <= 1){
            return out;
        }
        int i, j;
        i = j = 0;
        if(x > 1){
            while(pow(x, max_i) < bound){
                max_i++;
            }   
        }else{
            max_i=1;
        }
        if(y > 1) {
            while(pow(y, max_j) < bound){
                max_j++;
            }   
        }else{
            max_j=1;
        }
        for(i=0; i<max_i; i++) {
            for(j=0; j<max_j; j++) {
                int k = pow(x, i) + pow(y, j);
                if(k <= bound){
                    out.push_back(k);
                }
            }
        }
        int m = *max_element(out.begin(), out.end());
        int hash[m+1];
        for(i=0; i<m+1; i++) {
            hash[i] = 0;
        }
        for(i=0; i<out.size(); i++) {
            hash[out[i]]++;
        }
        vector<int> out1;
        for(i=0; i<m+1; i++) {
            if(hash[i] > 0) {
                out1.push_back(i);
            }
        }
        return out1;
    }
};
