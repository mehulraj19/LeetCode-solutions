class Solution{
    public:
        int first(vector<int> arr, int x, int n)
        {
                int low = 0, high = n - 1, res = -1;
            while (low <= high) {
                int mid = (low + high) / 2;
                if (arr[mid] > x)
                    high = mid - 1;
                else if (arr[mid] < x)
                    low = mid + 1;
                else {
                    res = mid;
                    high = mid - 1;
                }
            }
            return res;
        }
        int last(vector<int> arr, int x, int n)
        {
            int low = 0, high = n - 1, res = -1;
            while (low <= high) {
                int mid = (low + high) / 2;
                if (arr[mid] > x)
                    high = mid - 1;
                else if (arr[mid] < x)
                    low = mid + 1;
                else {
                    res = mid;
                    low = mid + 1;
                }
            }
            return res;
        }
        vector<int> searchRange(vector<int>& nums, int target) {
            vector<int> res;
            res.push_back(first(nums, target, nums.size()));
            res.push_back(last(nums, target, nums.size()));
            return res;
        }
};
