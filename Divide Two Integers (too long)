// all 992 cases have been passed but the solution takes a lot of time.
class Solution {
public:
    int divide(int dividend, int divisor) {
        if(dividend == INT_MIN && divisor == -1) {
            return INT_MAX;
        }
        // return 1;
        if(dividend == 0) {
            return 0;
        }
        if(dividend == divisor) {
            return 1;
        }
        if(divisor == 1) {
            return dividend;
        }
        if(divisor == -1) {
            return -dividend;
        }
        long int divisor1 = divisor;
        long int dividend1 = dividend;
        int flag = 0;
        if(divisor1 < 0 && dividend1 < 0) {
            divisor1 *= -1;
            dividend1 *= -1;
        }else{
            if(dividend1 < 0) {
                dividend1 *= -1;
                flag = 1;
            }else if(divisor1 < 0) {
                divisor1 *= -1;
                flag = 1;
            }
            
        }
        if(dividend1 < divisor1) {
            return 0;   
        }
        // cout << divisor << endl << dividend;
        long count = 0;
        long res = 0;
        while(res < dividend1) {
            res += divisor1;
            count++;
        }
        if(res > dividend1) {
            count--;
        }
        if(flag == 1) {
            count *= -1;
        }
        return count;
    }
};
