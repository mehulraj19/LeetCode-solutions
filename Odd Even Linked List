/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int NodeLength(ListNode* head) {
        int count = 0;
        while(head != NULL) {
            count++;
            head = head->next;
        }
        return count;
    }
    ListNode* insertNode(ListNode* start, int val) {
        ListNode* n = new ListNode(val);
        if(start == NULL) {
            start = n;
        }else{
            ListNode* last = start;
            while(last->next != NULL) {
                last = last->next;
            }
            last->next = n;
        }
        return start;
    }
    ListNode* oddEvenList(ListNode* head) {
        if(head == NULL) {
            return head;
        }
        ListNode* odd = NULL;
        ListNode* even = NULL;
        int n = NodeLength(head);
        int i=1;
        while(i<=n) {
            if(i%2 == 0) {
                even = insertNode(even, head->val);
            }else{
                odd = insertNode(odd, head->val);
            }
            head = head->next;
            i++;
        }
        ListNode* mainList = odd;
        while(odd->next != NULL) {
            odd = odd->next;
        }
        odd->next = even;
        return mainList;
    }
};
