/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* l3;
        ListNode* last;
        if(l1 == nullptr && l2 != nullptr){
            return l2;
        }else if(l1 != nullptr && l2 == nullptr){
            return l1;
        }else if(l1 == nullptr && l2 == nullptr){
            return nullptr;
        }
        if(l1->val <= l2->val) {
            l3 = last = l1;
            l1 = l1->next;
        }else{
            l3 = last = l2;
            l2 = l2->next;
        }
        while(l1 != nullptr && l2 != nullptr) {
            if(l1->val <= l2->val) {
                last->next = l1;
                last = l1;
                l1 = l1->next;
            }else{
                last->next = l2;
                last= l2;
                l2 = l2->next;
            }
        }
        while(l1 != nullptr) {
            last->next = l1;
            last = l1;
            l1 = l1->next;
        }
        while(l2 != nullptr) {
            last->next = l2;
            last = l2;
            l2 = l2->next;
        }
        return l3;
    }
};
